
package SwingLogin;

import MODEL.ModelUser;
import MODEL.SanPhamMD;
import MODEL.SanPhamModel2;
import java.awt.Color;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.Socket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Currency;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.plaf.ColorUIResource;

import Chay.Chay;

/**
 * 0
 *
 * @author ANH TUAN
 */
public class LoginFrame1 extends javax.swing.JFrame implements Serializable {

	private static final String host = "localhost";
	private static final int Port = 9999;
	private static final long serialVersionUID = 1L;
	private LoginPanel login;
	private Register register;

	private String userName;
	private String pass;
	private String nl;
	private String nl2;
	private String nl3;

	public String getNl2() {
		return nl2;
	}

	public void setNl2(String nl2) {
		this.nl2 = nl2;
	}

	public String getNl3() {
		return nl3;
	}

	public void setNl3(String nl3) {
		this.nl3 = nl3;
	}

	private ObjectOutputStream out;
	private ObjectInputStream in;

	public String getNl() {
		return nl;
	}

	public void setNl(String nl) {
		this.nl = nl;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPass() {
		return pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	private static int IdUser;

	public static int getIdUser() {
		return IdUser;
	}

	public static void setIdUser(int IdUser) {

	}

	/**
	 * Creates new form LoginFrame1
	 *
	 * @throws java.sql.SQLException
	 */
	public LoginFrame1() throws SQLException {
		initComponents();

		register = new Register();
		login = new LoginPanel();

		login.setOpaque(false);
		nen1.add(login);
		login.addAction(nen1, register);
		userName = login.getTextUser().getText();
		pass = String.valueOf(login.getPassWordField1().getPassword());

		login.getLoginBtn().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (!login.getTextUser().getText().isEmpty()
						&& !String.valueOf(login.getPassWordField1().getPassword()).isEmpty()) {
					new Thread(() -> performAction("login")).start();
				} else {
					JOptionPane.showMessageDialog(LoginFrame1.this, "You did not fill in enough");
				}
			}
		});

		register.addAction(nen1, login);
		register.getRegister().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (register.getTextUser().getText() != null && String.valueOf(register.getPass().getPassword()) != null
						&& String.valueOf(register.getConfirmPass().getPassword()) != null
						&& String.valueOf(register.getPass().getPassword())
								.equals(String.valueOf(register.getConfirmPass().getPassword()))) {
					new Thread(() -> performAction("register")).start();
				} else {
					JOptionPane.showMessageDialog(LoginFrame1.this,
							"You did not fill in the password completely or misidentified it");
				}
			}
		});

		IdUser = LoginPanel.getId();

	}

	public void open() {

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		nen1 = new TaoNen.Nen();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setBackground(new java.awt.Color(255, 255, 255));
		setUndecorated(true);
		setResizable(false);

		nen1.setBackground(new java.awt.Color(255, 255, 255));
		nen1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		nen1.setOpaque(true);
		nen1.setLayout(new java.awt.BorderLayout());

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				nen1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 378,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addGap(0, 0, 0)
						.addComponent(nen1, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)));

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {

		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(LoginFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(LoginFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(LoginFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(LoginFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					new LoginFrame1().setVisible(true);
				} catch (SQLException ex) {
					Logger.getLogger(LoginFrame1.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		});
	}

	// Variables declaration - do not modify
	private TaoNen.Nen nen1;
	// End of variables declaration

	private void performAction(String action) {
		if (action.equals("login")) {

			userName = login.getTextUser().getText();
			pass = String.valueOf(login.getPassWordField1().getPassword());

			if (!userName.isEmpty() && !pass.isEmpty()) {
				try (Socket socket = new Socket("localhost", 9999)) {
					out = new ObjectOutputStream(socket.getOutputStream());
					in = new ObjectInputStream(socket.getInputStream());
					nl = null;

					out.writeObject(action);
					out.writeObject(userName);
					out.writeObject(pass);
					out.writeObject(nl);

					processResponse();

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				JOptionPane.showMessageDialog(LoginFrame1.this, "Vui lòng không để trống!");
			}
		}
		if (action.equals("register")) {
			userName = register.getTextUser().getText();
			pass = String.valueOf(register.getPass().getPassword());
			String confirmPass = String.valueOf(register.getConfirmPass().getPassword());
			nl = null;

			// Kiểm tra các trường nhập liệu
			if (userName.isEmpty()) {
				JOptionPane.showMessageDialog(LoginFrame1.this, "Tên người dùng không được để trống!");
			} else if (pass.isEmpty()) {
				JOptionPane.showMessageDialog(LoginFrame1.this, "Mật khẩu không được để trống!");
			} else if (!pass.equals(confirmPass)) {
				JOptionPane.showMessageDialog(LoginFrame1.this, "Mật khẩu xác nhận không khớp!");
			} else {
				try (Socket socket = new Socket("localhost", 9999)) {
					out = new ObjectOutputStream(socket.getOutputStream());
					in = new ObjectInputStream(socket.getInputStream());

					out.writeObject(action);
					out.writeObject(userName);
					out.writeObject(pass);
					out.writeObject(nl);

					processResponse();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	private void processResponse() throws IOException, ClassNotFoundException {
		String responseMessage = (String) in.readObject();

		if ("Login success".equals(responseMessage)) {
			JOptionPane.showMessageDialog(this, "Đăng nhập thành công!");
			ModelUser user = (ModelUser) in.readObject();
			ArrayList<SanPhamMD> spList = (ArrayList<SanPhamMD>) in.readObject();

			Chay run = new Chay();

			dispose();
			run.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			run.setVisible(true);
			run.setLocationRelativeTo(null);
			run.uploaddata(spList);
			run.uploadUserData(user);

		} else if ("Login failed".equals(responseMessage)) {
			JOptionPane.showMessageDialog(this, "Sai tên đăng nhập hoặc mật khẩu!");
		} else if ("Register success".equals(responseMessage)) {
			JOptionPane.showMessageDialog(this, "Đăng kí thành công");
		} else if ("Register failed".equals(responseMessage)) {
			JOptionPane.showMessageDialog(this, "Đăng kí thất bại");
		} else {
			JOptionPane.showMessageDialog(this, "Unknown response type");
		}

	}

}
